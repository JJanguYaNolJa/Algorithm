import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class 햄토리8275 {

	public static void main(String[] args) throws Exception {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		int T = Integer.parseInt(in.readLine());

		for (int t = 1; t <= T; t++) {
			sb.append("#" + t + " ");
			StringTokenizer st = new StringTokenizer(in.readLine(), " ");
			int woori = Integer.parseInt(st.nextToken());
			int limit = Integer.parseInt(st.nextToken());
			int tc = Integer.parseInt(st.nextToken());
			int[][] line = new int[tc][3];
			int[] result = new int[woori];
			boolean possible = true;

			for (int i = 0; i < tc; i++) {
				st = new StringTokenizer(in.readLine(), " ");
				for (int j = 0; j < 3; j++) {
					line[i][j] = Integer.parseInt(st.nextToken());
				}
			}

//			Arrays.sort(line, new Comparator<int[]>() {
//
//				@Override
//				public int compare(int[] o1, int[] o2) {
//					// TODO Auto-generated method stub
//					return Integer.compare(o1[1], o2[1]);
//				}
//			});
			
			Arrays.sort(line, Comparator.comparingInt(o -> o[1]));

			for (int i = 0; i < line.length; i++) {
				
				int start = line[i][0] - 1;
				int end = line[i][1] - 1;
				int value = line[i][2];
				
				for (int j = end; j >= start && value > 0; j--) {
					int add = Math.min(limit - result[j], value);

					result[j] += add;
					value -= add;
				}

				if (line[i][2] > 0) {
					possible = false;
					sb.append(-1 + "\n");
					break;
				}
			}
			
			if (possible) {
				for (int i = 0; i < result.length; i++) {
					sb.append(result[i] + " ");
				}
				sb.append("\n");
			}
			
		}
		System.out.println(sb);
	}
}
